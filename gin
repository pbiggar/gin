#!/usr/bin/env python

# Read from the status file
import yaml
import gcc
import sys

def read_ginfile():
  stream = file("ginfile", "r")
  ginfile = yaml.load(stream)
  stream.close()
  return ginfile

def configure_meta_information(ginfile, config):
  meta = ginfile["meta"]
  config.write('#define PACKAGE "%s"\n' % (meta["name"]))
  config.write('#define VERSION "%s"\n' % (meta["version"]))
  config.write('\n');

def configure_standard_dirs(ginfile, config):
  name = ginfile["meta"]["name"]

  prefix = "/usr/local"
  datadir = prefix + "/share"
  libdir = prefix + "/lib"
  pkglibdir = prefix + "/" + name
  config.write('#define DATADIR "%s"\n' % (datadir))
  config.write('#define PKGLIBDIR "%s"\n' % (pkglibdir))
  config.write('\n');

def configure_options(ginfile, config):
  configures = [ginfile["configure"]]
  configures += [t["configure"] for t in ginfile["targets"].values()]

  libraries = []
  defines = []

  for conf in configures:
    for name,value in conf.items():
      print "Checking for " + name + '....',
      works = gcc.configure_test(value["test-program"], value["language"])
      print "yes" if works else "no"

      if works:
        defines += value.get("defines", [])
        libraries += value.get("libraries", [])

  for define in defines:
    if type(define) == 'dict':
      config.write('#define %s "%s"\n' % (define.keys()[0], define.values()[0]))
    else:
      config.write('#define %s\n' % (define))
  config.write('\n');

  return libraries




def configure(ginfile):

  config = file("config.h", "w")

  configure_meta_information(ginfile, config)
  configure_standard_dirs(ginfile, config)
  libraries = configure_options(ginfile, config)

  config.close()

  return libraries

def build(ginfine, config_libs):
  targets = ginfile["targets"]
  for (name, struct) in targets.items():
    files = struct["files"]
    libs = struct["libraries"] + config_libs
    includes = struct["includes"]
    includes += ['.'] # For config.h
    defs = {"HAVE_CONFIG_H": None}

    # Build them with gcc
    objs = []
    for filename in files:
      objs += [gcc.build_object(filename, includes, defs)]

    # Link
    gcc.link(name, objs, libs)


ginfile = read_ginfile()

# Simple command parsing for now
command = sys.argv[1] if len(sys.argv) > 1 else None
if command == "configure-compatibility-mode":
  compatibility_mode_configure(ginfile)
elif command == "make-compatibility-mode":
  compatibility_mode_make(ginfile)
elif command == None:
  build(ginfile, configure(ginfile))
